from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from utils.helpers import (
    get_command_list,
    get_help_text,
    get_balance,
    ensure_user
)
from utils.database import create_user_if_needed, get_user_data

router = Router()

# /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""

    user_data = await get_user_data(user_id)

    if not user_data:
        await create_user_if_needed(user_id, username=username)
        await message.answer("üéâ –í–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!\n–°—Ç–∞—Ä—Ç–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: <b>1000</b> –∫–æ—ñ–Ω—ñ–≤.")
    else:
        await message.answer("üëã –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")

    await message.answer(get_command_list())


# /balance
@router.message(Command("balance"))
async def cmd_balance(message: Message):
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)

    if not user_data:
        await message.answer("‚ùó –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start")
        return

    balance = await get_balance(user_id)
    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance}</b> –∫–æ—ñ–Ω—ñ–≤")


# /help
@router.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(get_help_text())
