from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from utils.database import (
    get_user_data,
    update_balance,
    create_user_if_needed,
    save_user_data
)
import os, json

router = Router()

@router.message(Command("give"))
async def handle_give(message: Message):
    args = message.text.split()

    if len(args) < 3:
        return await message.answer("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /give {—Å—É–º–∞} {username –±–µ–∑ @}")

    try:
        amount = int(args[1])
        if amount <= 0:
            return await message.answer("‚ùó –°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0.")
    except ValueError:
        return await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞.")

    sender_id = message.from_user.id
    sender_data = await get_user_data(sender_id)
    if sender_data.get("balance", 0) < amount:
        return await message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—ñ–Ω—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É.")

    username = args[2].lstrip("@").lower()
    recipient_id = None

    for file in os.listdir("data/users"):
        path = os.path.join("data/users", file)
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            if str(data.get("username", "")).lower() == username:
                recipient_id = int(file.replace(".json", ""))
                break

    if recipient_id is None:
        return await message.answer("‚ùó –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    if recipient_id == sender_id:
        return await message.answer("‚ùó –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–æ—ñ–Ω–∏ —Å–∞–º—ñ —Å–æ–±—ñ.")

    await update_balance(sender_id, -amount)
    await create_user_if_needed(recipient_id)
    await update_balance(recipient_id, amount)

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É
    sender_data = await get_user_data(sender_id)
    recipient_data = await get_user_data(recipient_id)

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    sender_data.setdefault("sent_transactions", [])
    recipient_data.setdefault("received_transactions", [])

    sender_data["sent_transactions"].append({
        "to_id": recipient_id,
        "to_username": username,
        "amount": amount
    })

    recipient_data["received_transactions"].append({
        "from_id": sender_id,
        "from_username": message.from_user.username or "–Ω–µ–≤—ñ–¥–æ–º–æ",
        "amount": amount
    })

    await save_user_data(sender_id, sender_data)
    await save_user_data(recipient_id, recipient_data)

    await message.answer(f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ <b>{amount}</b> –∫–æ—ñ–Ω—ñ–≤ –≥—Ä–∞–≤—Ü—é @{username}!")

    try:
        await message.bot.send_message(
            recipient_id,
            f"üéâ –í–∞–º –Ω–∞–¥—ñ—Å–ª–∞–≤(–ª–∞) @{message.from_user.username or '–≥—Ä–∞–≤–µ—Ü—å'} <b>{amount}</b> –∫–æ—ñ–Ω—ñ–≤!"
        )
    except:
        pass
