from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime, timedelta
import random

from utils.game_utils import db_add_balance, get_user_data, save_user_data

router = Router()

BONUSES = {
    "hourly": {
        "label": "üéØ –©–æ–≥–æ–¥–∏–Ω–Ω–∏–π",
        "cooldown": timedelta(hours=1),
        "range": (50, 150),
    },
    "daily": {
        "label": "‚òÄÔ∏è –©–æ–¥–µ–Ω–Ω–∏–π",
        "cooldown": timedelta(hours=24),
        "range": (300, 1000),
    },
    "weekly": {
        "label": "üèÜ –©–æ—Ç–∏–∂–Ω–µ–≤–∏–π",
        "cooldown": timedelta(days=7),
        "range": (1500, 3000),
    }
}

@router.message(Command("bonus"))
async def choose_bonus_type(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=b["label"], callback_data=f"bonus:{key}")]
        for key, b in BONUSES.items()
    ])
    await message.answer("üéÅ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –±–æ–Ω—É—Å—É:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("bonus:"))
async def handle_bonus(callback: CallbackQuery):
    user_id = callback.from_user.id
    bonus_type = callback.data.split(":")[1]

    user = await get_user_data(user_id)
    if user is None:
        await callback.answer("‚ùó –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start", show_alert=True)
        return

    now = datetime.utcnow()
    key = f"last_{bonus_type}_bonus"
    last_claim_str = user.get(key)

    cooldown = BONUSES[bonus_type]["cooldown"]
    reward_range = BONUSES[bonus_type]["range"]

    if last_claim_str:
        try:
            last_claim = datetime.fromisoformat(last_claim_str)
            if now - last_claim < cooldown:
                time_left = cooldown - (now - last_claim)
                hours, remainder = divmod(int(time_left.total_seconds()), 3600)
                minutes = (remainder // 60) % 60
                await callback.answer(
                    f"‚è≥ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —á–µ—Ä–µ–∑ {hours} –≥–æ–¥ {minutes} —Ö–≤.", show_alert=True
                )
                return
        except Exception:
            pass  # –£ –≤–∏–ø–∞–¥–∫—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ

    bonus_amount = random.randint(*reward_range)
    await db_add_balance(user_id, bonus_amount)

    # –æ–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –±–æ–Ω—É—Å—É
    user[key] = now.isoformat()
    await save_user_data(user_id, user)

    await callback.message.answer(
        f"‚úÖ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {BONUSES[bonus_type]['label']} –±–æ–Ω—É—Å: <b>{bonus_amount}</b> –∫–æ—ñ–Ω—ñ–≤!"
    )
    await callback.answer()
