import random
import string
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from utils.database import get_balance, update_balance, get_user_data, save_user_data, create_user_if_needed

router = Router()

def generate_check_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))


@router.message(Command("createcheck"))
async def create_check(message: Message):
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        return await message.answer("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /createcheck {—Å—É–º–∞}")

    amount = int(args[1])
    user_id = message.from_user.id

    await create_user_if_needed(user_id)
    balance = await get_balance(user_id)
    if amount <= 0:
        return await message.answer("‚ùó –°—É–º–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0.")
    if balance < amount:
        return await message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—ñ–Ω—ñ–≤.")

    code = generate_check_code()

    user_data = await get_user_data(user_id)
    checks = user_data.get("created_checks", [])
    checks.append({
        "code": code,
        "amount": amount,
        "claimed": False,
        "claimed_by": None
    })
    user_data["created_checks"] = checks
    await update_balance(user_id, -amount)
    await save_user_data(user_id, user_data)

    await message.answer(
        f"‚úÖ –ß–µ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\nüîí –ö–æ–¥: <code>{code}</code>\nüéÅ –°—É–º–∞: <b>{amount}</b> –∫–æ—ñ–Ω—ñ–≤\n\n"
        f"üë§ –ü–µ—Ä—à–∏–π, —Ö—Ç–æ –≤–≤–µ–¥–µ <code>/check {code}</code>, –æ—Ç—Ä–∏–º–∞—î –Ω–∞–≥–æ—Ä–æ–¥—É!"
    )


@router.message(Command("check"))
async def redeem_check(message: Message):
    args = message.text.split()
    if len(args) != 2:
        return await message.answer("‚ùó –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /check {–∫–æ–¥}")

    code = args[1].strip().upper()
    user_id = message.from_user.id
    await create_user_if_needed(user_id)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–º–æ–∂–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏, —è–∫—â–æ —î —ñ–Ω–¥–µ–∫—Å–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏)
    from os import listdir
    from utils.database import DB_PATH, _load_user_data, save_user_data

    for filename in listdir(DB_PATH):
        user_data = _load_user_data(filename.split(".")[0])
        checks = user_data.get("created_checks", [])
        for check in checks:
            if check["code"] == code:
                if check["claimed"]:
                    return await message.answer("‚ùó –¶–µ–π —á–µ–∫ –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")
                if int(filename.split(".")[0]) == user_id:
                    return await message.answer("‚ùó –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π —á–µ–∫.")

                # –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —á–µ–∫
                check["claimed"] = True
                check["claimed_by"] = user_id
                await update_balance(user_id, check["amount"])
                save_user_data(filename.split(".")[0], user_data)

                redeemer_data = await get_user_data(user_id)
                activated = redeemer_data.get("activated_checks", [])
                activated.append({
                    "code": code,
                    "amount": check["amount"]
                })
                redeemer_data["activated_checks"] = activated
                await save_user_data(user_id, redeemer_data)

                return await message.answer(f"üéâ –í–∏ –∞–∫—Ç–∏–≤—É–≤–∞–ª–∏ —á–µ–∫ –Ω–∞ <b>{check['amount']}</b> –∫–æ—ñ–Ω—ñ–≤!")

    return await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –Ω–µ—ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥ —á–µ–∫—É.")


@router.message(Command("mychecks"))
async def my_checks_menu(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°—Ç–≤–æ—Ä–µ–Ω—ñ", callback_data="checks_created")],
        [InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ", callback_data="checks_activated")]
    ])
    await message.answer("üìã –û–±–µ—Ä–∏ —Ç–∏–ø —á–µ–∫—ñ–≤:", reply_markup=kb)


@router.callback_query(F.data.startswith("checks_"))
async def handle_checks_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    data = await get_user_data(user_id)

    if callback.data == "checks_created":
        checks = data.get("created_checks", [])
        if not checks:
            return await callback.message.edit_text("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —á–µ–∫—ñ–≤.")
        msg = "<b>üìù –°—Ç–≤–æ—Ä–µ–Ω—ñ —á–µ–∫–∏:</b>\n"
        for c in checks:
            status = "‚úÖ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ" if c["claimed"] else "üîí –Ω–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ"
            msg += f"‚Ä¢ <code>{c['code']}</code> ‚Äî {c['amount']} –∫–æ—ñ–Ω—ñ–≤ ({status})\n"
        await callback.message.edit_text(msg)

    elif callback.data == "checks_activated":
        checks = data.get("activated_checks", [])
        if not checks:
            return await callback.message.edit_text("üì≠ –í–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤—É–≤–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —á–µ–∫–∞.")
        msg = "<b>‚úÖ –ê–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ —á–µ–∫–∏:</b>\n"
        for c in checks:
            msg += f"‚Ä¢ <code>{c['code']}</code> ‚Äî {c['amount']} –∫–æ—ñ–Ω—ñ–≤\n"
        await callback.message.edit_text(msg)
