from aiogram import Router, F
from aiogram.types import Message

from utils.game_utils import db_add_balance, db_get_balance
from config import ADMIN_IDS

router = Router()

@router.message(F.text.startswith("/–ø–æ–ø–æ–≤–Ω–∏—Ç–∏"))
async def admin_topup_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        await message.answer("‚õî –¢–∏ –Ω–µ –∞–¥–º—ñ–Ω üòé")
        return

    try:
        parts = message.text.split()
        if len(parts) == 2 and parts[1].isdigit():
            target_id = user_id
            amount = int(parts[1])
        elif len(parts) == 3 and parts[1].isdigit() and parts[2].isdigit():
            target_id = int(parts[1])
            amount = int(parts[2])
        else:
            await message.answer("‚ùå –ü—Ä–∏–∫–ª–∞–¥:\n/–ø–æ–ø–æ–≤–Ω–∏—Ç–∏ 1000 ‚Äî —Å–æ–±—ñ\n/–ø–æ–ø–æ–≤–Ω–∏—Ç–∏ 123456789 1000 ‚Äî —ñ–Ω—à–æ–º—É")
            return

        await db_add_balance(target_id, amount)
        new_balance = await db_get_balance(target_id)

        await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_id} –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ {amount} –∫–æ—ñ–Ω—ñ–≤.\nüí∞ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}")
    except Exception as e:
        await message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

@router.message(F.text.startswith("/–±–∞–ª–∞–Ω—Å"))
async def admin_check_balance_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        await message.answer("‚õî –¢–∏ –Ω–µ –∞–¥–º—ñ–Ω üòé")
        return

    try:
        parts = message.text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            await message.answer("‚ùå –ü—Ä–∏–∫–ª–∞–¥: /–±–∞–ª–∞–Ω—Å 123456789")
            return

        target_id = int(parts[1])
        balance = await db_get_balance(target_id)

        await message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_id}: {balance}")
    except Exception as e:
        await message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
