from aiogram.types import Message
from aiogram import types
from utils.database import (
    get_balance,
    set_balance,
    update_balance,
    get_user_data,
    save_user_data,
)

# –¢–µ–∫—Å—Ç–∏ –ø—ñ–¥–∫–∞–∑–æ–∫
HINT_TEXT = (
    "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
    "/–∫–∞–∑–∏–Ω–æ 100\n"
    "/—Ä—É–ª–µ—Ç–∫–∞ 200 3\n"
    "/–∫—É–±–∏–∫–∏ 150 4\n"
    "/–≤–≥ 50 7 20\n"
    "/–º—ñ–Ω–∏ 100 2\n"
    "/–±–∞—Å–∫–µ—Ç–±–æ–ª 100"
)

START_COMMANDS = (
    "/start - –ø–æ—á–∞—Ç–æ–∫\n"
    "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫–∏\n"
    "/profile - –ü—Ä–æ—Ñ—ñ–ª—å\n"
    "/–º—ñ–π—Å—Ç–∞—Ç - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    "/–∑–∞–≤–¥–∞–Ω–Ω—è - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
    "/—Ç–æ–ø - –¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤\n"
    "/–ø–µ—Ä–µ–¥–∞—Ç–∏ - –ü–µ—Ä–µ–¥–∞—Ç–∏ –∫–æ—ñ–Ω–∏ —ñ–Ω—à–æ–º—É\n"
    "/–ø—Ä–æ–º–æ–∫–æ–¥ - –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥\n"
    "/—Ä–µ—Ñ–µ—Ä–∞–ª - –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞\n"
    "\nüéÆ –Ü–≥—Ä–∏:\n"
    "/–∫–∞–∑–∏–Ω–æ {—Å—Ç–∞–≤–∫–∞}\n"
    "/—Ä—É–ª–µ—Ç–∫–∞ {—Å—Ç–∞–≤–∫–∞} {—á–æ—Ä–Ω–µ/—á–µ—Ä–≤–æ–Ω–µ} {—á–∏—Å–ª–æ}\n"
    "/–∫—É–±–∏–∫–∏ {—Å—Ç–∞–≤–∫–∞} {–±—ñ–ª—å—à–µ/–º–µ–Ω—à–µ} {—á–∏—Å–ª–æ}\n"
    "/–≤–≥ {—Å—Ç–∞–≤–∫–∞} {—á–∏—Å–ª–æ} {–¥—ñ–∞–ø–∞–∑–æ–Ω}\n"
    "/–º—ñ–Ω–∏ {—Å—Ç–∞–≤–∫–∞} {–∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω}\n"
    "/–±–∞—Å–∫–µ—Ç–±–æ–ª {—Å—Ç–∞–≤–∫–∞}"
)

HELP_COMMANDS = (
    "üìù –ü—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥:\n"
    "/–∫–∞–∑–∏–Ω–æ {—Å—Ç–∞–≤–∫–∞} ‚Äî –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–Ω–æ–∂–Ω–∏–∫ –≤—ñ–¥ 0x –¥–æ 10x\n"
    "/—Ä—É–ª–µ—Ç–∫–∞ {—Å—Ç–∞–≤–∫–∞} {—á–æ—Ä–Ω–µ/—á–µ—Ä–≤–æ–Ω–µ} {—á–∏—Å–ª–æ (1-36)} ‚Äî —Ä—É–ª–µ—Ç–∫–∞\n"
    "/–∫—É–±–∏–∫–∏ {—Å—Ç–∞–≤–∫–∞} {–±—ñ–ª—å—à–µ/–º–µ–Ω—à–µ} {—á–∏—Å–ª–æ} ‚Äî –≤–≥–∞–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞ (1‚Äì6)\n"
    "/–≤–≥ {—Å—Ç–∞–≤–∫–∞} {—á–∏—Å–ª–æ} {–¥—ñ–∞–ø–∞–∑–æ–Ω} ‚Äî –≤–≥–∞–¥–∞–π —á–∏—Å–ª–æ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ\n"
    "/–º—ñ–Ω–∏ {—Å—Ç–∞–≤–∫–∞} {–∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω (1‚Äì10)} ‚Äî –≤—ñ–¥–∫—Ä–∏–≤–∞–π –ø–æ–ª–µ, —É–Ω–∏–∫–∞—é—á–∏ –º—ñ–Ω\n"
    "\n"
    "/profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å\n"
    "/–º—ñ–π—Å—Ç–∞—Ç ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ñ–≥–æ—Ä\n"
    "/–∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
    "/—Ç–æ–ø ‚Äî —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ —Ä—ñ–∑–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏\n"
    "/–ø–µ—Ä–µ–¥–∞—Ç–∏ {–Ω—ñ–∫} {—Å—É–º–∞} ‚Äî –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–æ—ñ–Ω–∏ —ñ–Ω—à–æ–º—É –≥—Ä–∞–≤—Ü—é\n"
    "/–ø—Ä–æ–º–æ–∫–æ–¥ {–∫–æ–¥} ‚Äî –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥\n"
    "/—Ä–µ—Ñ–µ—Ä–∞–ª ‚Äî —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞"
)


async def add_balance(user_id: int, amount: int):
    user_data = await get_user_data(user_id)
    user_data["balance"] = user_data.get("balance", 0) + amount
    await save_user_data(user_id, user_data)

async def remove_balance(user_id: int, amount: int) -> bool:
    user_data = await get_user_data(user_id)
    if user_data.get("balance", 0) < amount:
        return False
    user_data["balance"] -= amount
    await save_user_data(user_id, user_data)
    return True

async def update_stats(user_id: int, game: str, win: bool):
    await add_game_stat(user_id, win, game)

def get_user_name(user) -> str:
    return user.first_name if not user.username else f"@{user.username}"


def send_usage_hint(message: Message):
    return message.answer(HINT_TEXT)


async def parse_bet(user_id: int, bet_input):
    balance = await get_balance(user_id)

    if str(bet_input).lower() == "–≤—Å–µ":
        bet = balance
    else:
        try:
            bet = int(bet_input)
        except ValueError:
            return None, "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—Ç–∞–≤–∫—É."

    if bet <= 0 or bet > balance:
        return None, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—ñ–Ω—ñ–≤ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç–∞–≤–∫–∞."

    return bet, None




def get_bet_amount(user_id: str, arg: str) -> int | None:
    user_data = get_user_data(user_id)
    balance = user_data.get("balance", 0)
    if arg.lower() == "–≤—Å–µ":
        return balance
    try:
        bet = int(arg)
        if bet > balance or bet <= 0:
            return None
        return bet
    except:
        return None


async def add_game_stat(user_id: int, won: bool | None, game: str):
    user_data = await get_user_data(user_id)

    user_data["games_played"] = user_data.get("games_played", 0) + 1
    if won is True:
        user_data["games_won"] = user_data.get("games_won", 0) + 1
    elif won is False:
        user_data["games_lost"] = user_data.get("games_lost", 0) + 1

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ games_stat ‚Äî —Å–ª–æ–≤–Ω–∏–∫
    if not isinstance(user_data.get("games"), dict):
        user_data["games"] = {}

    game_stats = user_data["games"]
    game_stats[game] = game_stats.get(game, 0) + 1

    await save_user_data(user_id, user_data)


async def add_referral_bonus(referer_id: int, bonus: int, reason: str = ""):
    await update_balance(referer_id, bonus)
    # optionally log reason or send notification


async def check_referral_events(user_id: int, change: int, is_win: bool):
    user_data = await get_user_data(user_id)
    referer_id = user_data.get("referer_id")
    if not referer_id:
        return

    if not is_win and change < 0:
        bonus = int(abs(change) * 0.05)
        await add_referral_bonus(referer_id, bonus, "5% –∑ –ø—Ä–æ–≥—Ä–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞")
    elif is_win and change > 10_000:
        bonus = int(change * 0.03)
        await add_referral_bonus(referer_id, bonus, "3% –∑ –≤–∏–≥—Ä–∞—à—É >10–∫")

async def send_message_with_balance(message: Message, text: str, balance: int):
    await message.answer(f"{text}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}")

async def db_get_balance(user_id: int) -> int:
    user_data = await get_balance(user_id)
    return user_data or 0

async def db_add_balance(user_id: int, amount: int):
    await update_balance(user_id, amount)

def get_user_name(user: types.User) -> str:
    if user.username:
        return f"@{user.username}"
    return user.full_name

async def update_user_stats(user_id: str, game: str, is_win: bool):
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–º–æ–≥/–ø–æ—Ä–∞–∑–æ–∫, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
    stats = await get_user_stats(user_id)
    stats["games"] += 1
    stats["wins"] += int(is_win)
    stats["losses"] += int(not is_win)
    stats["by_game"].setdefault(game, {"wins": 0, "losses": 0})
    if is_win:
        stats["by_game"][game]["wins"] += 1
    else:
        stats["by_game"][game]["losses"] += 1
    await save_user_stats(user_id, stats)
